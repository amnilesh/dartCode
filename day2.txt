
//traditional odd even program

// void main(){
  
//   var value = 1;
  
//   if(value%2 == 0){
    
//     print("value is even");
    
    
//   }
//   else
//   {
//     print("value is odd");
//   }
// }


//list with fixed list type


// void main(){
  
//   var heroslist = new List(5);
  
//   heroslist[0] = "hulk";
//   heroslist[1] = "Iron Man";
  
//  for(int i=0;i<2;i++){
//    print(heroslist[i]);
//  }
  
  
  
// }


// This programs checks that if string is empty or not

// void main(){
// String str = 'abcvfdfdggdg'; 
// if(str.isEmpty) { 
//    print('String  empty'); 
// } else { 
//    print('String is not empty'); 
// } 

// }





// void main(){
  
//   int userInput = 7;
  
//   Switch(userInput){
    
//     case one: 
      
//             print("Case is 1");
    
    
    
    
    
    
    
//   }
  
  
// }



























































//simple object and class

// void main() {

//   var firstSis = new sisterOne();
//     firstSis.height = 10;

//     firstSis.sisInfo();
  
// }
// class sisterOne{

//   var height ;

//   sisInfo(){
//     print(height);
//   }

// }



// practicing final and const keyword
// void main(List<String> args) {


   //what is final and const

   //   set once , const type variable initialised during compilation, wheather it is used or not
//  const pi = 3.14;

   // but final  set once and initialised when used, if not used it would not memory 

//   final name = 'nilesh';

//   print(name);

//   var isLarge = new Sister();

//   isLarge.resultInfo();


// }

// class Sister{
//       static const poojaIslarge = "yes pooja is big" ;

//       final rinkuIsSmall = "yes rinku is small";

//       resultInfo() => print(poojaIslarge);
 
//   //  resultInfo()  {print(poojaIslarge);}  //this.code exactly same as above but with shorthend tech;
      
      

// }



/*  void main(List<String> args) {
  
  // conditional Expressions type 1
// condition ? exp 1 : exp2 ;

  var firstDigit = 100;
  var secDigit = 20;

  /*  if (firstDigit > secDigit) {
      print("first digit is large");
      
    }
    else{
      print("secDigit is large");
    } 
    */

  /*This code works fine 
    but is one more smart way of doing same thing*/
    // This is How thing done ----  condition ? exp1 : exp2;

  firstDigit > secDigit ? print('$firstDigit is large') : print('$secDigit is large');  

}
 */

/* Expression type two
    exp1 ?? exp2
    if exp1 is  null it checks exp2 and eturn its value

     if exp1 is not null print its value
*/
// ------------------------------------------------------
/*         void main(List<String> args) {
  
           String name = null;

            print(name ?? "no name");
}

*/


/* switch case code || switch case is like if-else-if ladder

void main(List<String> args) {
  
var marks = 5;
      // as paremeter in switch only int or String is allowed;
    switch(marks){
      case 1: 
      print("your marks is $marks");
      break;

      case 2:
      print("your marks is $marks");
      break;
      
      default:
      print("your are out of rrade ");
    }

}
*/


/* For loop in Dart */
// void main(List<String> args) {
  
//     for (var i = 0; i <= 5; i++) {
//       print("hello");
//     }}

  // while loop
  //   void main(List<String> args) {
  //     var i=0;
  //  while (i < 10) {
  //    print("hello");
  //    i++;
  //  }
  //   }


/* This is do- while loop  */
    // void main() {


    //       int i=10;
    //   do {
    //     print(i);
    //     i++;
        
    //   } while (i <5);
      
      

    // }


    //for loop simple odd even program
//  







/* break keyword along with labels
void main() {
  
  outerloop: for (var i = 0; i < 10; i++) {

    for (var j = 1; j < 10; j++) {
      // something
      print('$i $j');

      if (i == 1 && j == 1 ) {
       break outerloop;
        
      }
    } 
  }
}
*/
// continue keyword along with labels

  /* remove comment (try)
void main(List<String> args) {
    
   outer: for (var i = 1; i <= 3; i++) {

      for (var j = 1; j <= 3; j++) {
            // if (i == 2 && j==1) 
            // {
            //   continue outer ;
            // }
            // if (i==3 && j==2) {
            //   continue;
              
            // }
            
        print('$i $j');
        
                                   }

                                       }
                              }

*/


// void main(List<String> args) {
//   var myCar =  car();
//  var printHeightValue = myCar.add();
//  print(printHeightValue);

// }

// class car{
//   int length = 10;
//   int width = 10;
//   int height;
//   int add(){
//     height = length + width;
//     return height;

//   }
 
//   }

/* funtion parameter || this is also called required parameter  

void main(List<String> args) {

  var myCar = car();

  myCar.showCarInfo(15, 'BMW');

  var myArea = Circle();
    print(myArea.areaOfCircle(2));

}

class car{
  int height;
  String name;

  void showCarInfo(height, name){

      print('$height and $name');

      
  }

}

class Circle{
int r;

num area;
static const pi = 3.14;


num areaOfCircle(r) =>   pi*r; 

}
*/

/* this is optional positional parameter that is used in funtion

void main(List<String> args) {
  printCities("Lucknow");


}

String printCities(String name1, [String name2, String name3]) {

 print('name 1 is $name1 \nname2 is $name2 \nname3 is $name3');


}
*/

/* Named parameter 
          //        SYNTAX -----------      parameter:value
            //      sequence is necessory in names parameter and this is advantage

void main(List<String> args) {
    //cityName("azamgarh", sec:"Lucknow",third:"mau");
    cityName("azamgarh", third:"mau", sec:"Lucknow");
  
}

String cityName(String first, {String sec, String third}){

  print('$first and $sec and $third');
}


*/


// void main(List<String> args) {
//    int a = 122;
//    int b = 2 ;

// // this is try catch block
//   try {
//     int c=  a~/b;
//     print(c);
//   } catch (e, s) {
//     print("This is $e");
//     print('stacktrace $s');
//   }

// // this is ON clouse
//     try {
//       int c=  a~/b;
//   print(c);
//     } on IntegerDivisionByZeroException {
//       print('This is exception can not divide by 0');
//     }

// // with finally
//   try {
//     int c=  a~/b;
//   print(c);
//   } catch (e) {
//     print(e);
//   }finally{
//     print("this is finally block");
//   }







// }

// creating custom class for exception

// void main(List<String> args) {

//   try {
//     depositAmount(-2000);
//   } catch (e) {
//     print();
//   }
  
// }
// class depositException implements Exception{
//   void throwException(){
//     print('your can not enter amount of less than zero');
//   }
// }


// void depositAmount(int amount){
//   if (amount <0) {
//     throw new depositException();
    
//   }
//   else{
// print(amount);}
// }




















































